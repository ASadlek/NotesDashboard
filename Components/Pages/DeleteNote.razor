@page "/notes/delete/{id:int}"
@using Notes.Data
@using Notes.Services
@inject NoteService NoteService
@inject NavigationManager Navigation

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>

@if (_note != null)
{
    <div>
        <h4>Note</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">Email:</dt>
            <dd class="col-sm-10">@_note.FirstName</dd>
            <dt class="col-sm-2">Date:</dt>
            <dd class="col-sm-10">@_note.Date.ToShortDateString()</dd>
            <dt class="col-sm-2">Mood:</dt>
            <dd class="col-sm-10">@_note.Mood</dd>
            <dt class="col-sm-2">Messanger:</dt>
            <dd class="col-sm-10">@_note.Message</dd>
        </dl>

        <EditForm Model="_note" OnValidSubmit="HandleDelete" FormName="@($"deleteNoteForm-{_note.Id}")">
            <button type="submit" class="btn btn-danger">Delete</button> |
        </EditForm>
        
        <a href="/notes">Back to Dashboard</a>
    </div>
}
else
{
    <p>Note not found.</p>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private Note _note;

    protected override async Task OnInitializedAsync()
    {
        _note = await NoteService.GetNoteByIdAsync(Id);

        if (_note == null)
        {
            Navigation.NavigateTo("/notes");
        }
    }

    private async Task HandleDelete()
    {
        await NoteService.DeleteNoteAsync(Id);
        Navigation.NavigateTo("/notes");
    }
}