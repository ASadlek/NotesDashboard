@page "/notes/edit/{id:int}"
@using Notes.Data
@using Notes.Services
@inject NoteService NoteService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Notes.Components.Account

@inject NoteService NoteService
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor


<h1>Edit</h1>

<h4>Note</h4>
<hr />

<EditForm Model="Note" OnValidSubmit="HandleCreate" FormName="createNoteForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">Author's Email</label>
        <InputText id="firstName" class="form-control" @bind-Value="Note.FirstName" readonly />
        <ValidationMessage For="@(() => Note.FirstName)" />
    </div>

    <div class="form-group">
        <label for="date">Date</label>
        <InputDate id="date" class="form-control" @bind-Value="Note.Date" readonly />
        <ValidationMessage For="@(() => Note.Date)" />
    </div>

    <div class="form-group">
        <span class="text-danger">*</span>
        <label for="mood">Mood</label>
        <InputSelect id="mood" class="form-control" @bind-Value="Note.Mood">
            <option value="Happy">Happy</option>
            <option value="Excited">Excited</option>
            <option value="Sad">Sad</option>
            <option value="Angry">Angry</option>
            <option value="Other">Other</option>
        </InputSelect>
        <ValidationMessage For="@(() => Note.Mood)" />
    </div>

    <div class="form-group">
        <span class="text-danger">*</span>
        <label for="message">Message</label>
        <InputText id="message" class="form-control" @bind-Value="Note.Message" />
        <ValidationMessage For="@(() => Note.Message)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Create</button>
    </div>
</EditForm>

<div>
    <a href="/notes">Back to Dashboard</a>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Note Note { get; set; } = new();

    private ApplicationUser user = default!;
    private string? email;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);

        if (email == null)
        {
            Note.FirstName = "xd";
            Note.Date = DateTime.Today.AddDays(2);
        }
        else
        {
            Note.Date = DateTime.Today;
            Note.FirstName = email;
        }

    }

    private async Task HandleCreate()
    {
        await NoteService.AddNoteAsync(Note);

        await NoteService.DeleteNoteAsync(Id);
        Navigation.NavigateTo("/notes");
    }
}
