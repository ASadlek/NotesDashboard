@page "/notes/delete/{id:int}"
@using Notes.Data
@using Notes.Services
@inject PersonService PersonService
@inject NavigationManager Navigation

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>

@if (_person != null)
{
    <div>
        <h4>Person</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">First Name:</dt>
            <dd class="col-sm-10">@_person.FirstName</dd>
            <dt class="col-sm-2">Last Name:</dt>
            <dd class="col-sm-10">@_person.LastName</dd>
            <dt class="col-sm-2">Date of Birth:</dt>
            <dd class="col-sm-10">@_person.DateOfBirth.ToShortDateString()</dd>
            <dt class="col-sm-2">Gender:</dt>
            <dd class="col-sm-10">@_person.Gender</dd>
            <dt class="col-sm-2">Phone Number:</dt>
            <dd class="col-sm-10">@_person.PhoneNumber</dd>
            <dt class="col-sm-2">Email:</dt>
            <dd class="col-sm-10">@_person.Email</dd>
        </dl>

        <EditForm Model="_person" OnValidSubmit="HandleDelete" FormName="@($"deletePersonForm-{_person.Id}")">
            <button type="submit" class="btn btn-danger">Delete</button> |
        </EditForm>
        
        <a href="/people">Back to List</a>
    </div>
}
else
{
    <p>Person not found.</p>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private Person _person;

    protected override async Task OnInitializedAsync()
    {
        _person = await PersonService.GetPersonByIdAsync(Id);

        if (_person == null)
        {
            Navigation.NavigateTo("/people");
        }
    }

    private async Task HandleDelete()
    {
        await PersonService.DeletePersonAsync(Id);
        Navigation.NavigateTo("/people");
    }
}